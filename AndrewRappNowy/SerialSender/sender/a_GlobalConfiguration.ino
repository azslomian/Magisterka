#include <XBee.h>
#include <SoftwareSerial.h>

XBee xbee = XBee();

uint8_t payload[] = { 0, 0 };

//7E 00 10 10 01 00 00 00 00 00 00 00 00 FF FE 00 00 30 30 91
//7E 00 10 10 01 00 00 00 00 00 00 FF FF FF FE 00 00 30 30 93 // broadcast message

//7E 00 10 10 01 00 7D 33 A2 00 40 A7 3A 7D 33 FF FE 00 00 30 30 A8 // to no.9 message
//00 13 A2 00 40 A7 3A 13   // 9 address



///Dla malej wiadomosci 2 bytes
uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x40, 0xA7, 0x3A, 0x7D, 0x33, 0xFF, 0xFE, 0x00, 0x01, 0x30, 0x30, 0xA7};   // message to 9  

///Dla malej wiadomosci 2 bytes no ACK
//uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x10, 0x10, 0x00, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x40, 0xA7, 0x3A, 0x7D, 0x33, 0xFF, 0xFE, 0x00, 0x01, 0x30, 0x30, 0xA8};   // message to 9  

//0x0013a200, 0x40A73A13
// Dla duzej 95 bytes
//uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x6D, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x40, 0xA7, 0x3A, 0x7D, 0x33, 0xFF, 0xFE, 0x00, 0x01, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x07};   // message to 9  


// Dla duzej 95 bytes no ACK
//uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x6D, 0x10, 0x00, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x40, 0xA7, 0x3A, 0x7D, 0x33, 0xFF, 0xFE, 0x00, 0x01, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x08};   // message to 9  

//ilosc zer - 95
//00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

//message 95 bytes
//7E 00 6D 10 01 00 7D 33 A2 00 40 A7 3A 7D 33 FF FE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08


//Dla adresu logicznego
// FF0A - XBee 9
// 0 - XBee12
// 8E28 - XBee 10

///Dla malej wiadomosci 2 bytes with logic Address
//uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xED};   // message to 9 

///Dla malej wiadomosci 2 bytes adres broadcast
//uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xF3};   // message to 9 

///Dla duzej wiadomosci 95 bytes
//uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x01,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0xE6};   // message to 9  


// 92 bajty wiadomosci
//uint8_t messageForSerialSend[] = {0x7E, 0x00, 0x6A, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x01,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//0x00, 0x00, 0x00, 0x00,
//0xE6};   // message to 9  

//7E 00 6D 10 01 00 00 00 00 00 00 FF FF FF 0A 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E6


// SH + SL Address of receiving XBee
XBeeAddress64 addrU02 = XBeeAddress64(0x0013a200, 0x40A739F0);  
XBeeAddress64 addrU03 = XBeeAddress64(0x0013a200, 0x409F6E7F);
XBeeAddress64 addrU04 = XBeeAddress64(0x0013a200, 0x409F378E);  
XBeeAddress64 addrU05 = XBeeAddress64(0x0013a200, 0x40A73A0B);
XBeeAddress64 addrU06 = XBeeAddress64(0x0013a200, 0x40982DCA);   
XBeeAddress64 addrU07 = XBeeAddress64(0x0013a200, 0x40AD19DE);
XBeeAddress64 addrU08 = XBeeAddress64(0x0013a200, 0x409F6EA2);    
XBeeAddress64 addrU09 = XBeeAddress64(0x0013a200, 0x40A73A13);
XBeeAddress64 addrU10 = XBeeAddress64(0x0013a200, 0x40A739ED);    
XBeeAddress64 addrU11 = XBeeAddress64(0x0013a200, 0x409F6E72);
XBeeAddress64 addrU12 = XBeeAddress64(0x0013a200, 0x40AD19ED);    
XBeeAddress64 addrU13 = XBeeAddress64(0x0013a200, 0x40AD19F8);

int AP=2;  //1 , 2
int BaudRateXBee = 38400;
int SerialMonitorBaudRate = 9600;
int sizeOfFrame = 16;

XBeeAddress64 addrU = addrU09;   //to configure
ZBTxRequest zbTxU = ZBTxRequest(addrU, payload, sizeof(payload));
ZBTxStatusResponse txStatus = ZBTxStatusResponse();

int statusLed = 13;
int errorLed = 13;
int inByte = 0;
int endOfMessage = 0;
int i = 0;
int g = 0;
char message[100];
unsigned long sendingTime;
unsigned long responseTime;
long resultTime;
unsigned long meanResponseTime = 0;

//resetClock
 unsigned long myMillis=0;   
 unsigned long prevMillis=0; 
 int resetPin = 3;  

//SyncTime
unsigned long  arduino_time;
unsigned long clock_sync_complete;
unsigned long srm_time;
unsigned long sync_diff_time;
unsigned long run_table_start_time;
bool rjc_ready = false;
bool route_complete = false;
bool WAIT_FOR_CLOCK_SYNC = false;
int ID_NUMBER;
int run_table_row_count;
float run_table_rows[100][2];
